opacity = 5,
color = ~ifelse(casecount > 0, reds(casecount), NA),
popup = ~paste0(county, ",  ", casecount, " cases"))
}else{
my_map <- my_map%>% addCircleMarkers(lng = ~long,
lat = ~lat,
radius = ~log(death) * 3.5,
weight = 1,
opacity = 5,
color = ~ifelse(death > 0, reds(death), NA),
popup = ~paste0(county, ",  ", death, " cases"))
}
}
})
}
shinyApp(ui2, server5,options = list(height = 550))
# shiny server input/output
server5 <- function(input, output, session) {
filteredData <- reactive({
data1 %>%
filter(day >= input$integer[1] & day <= input$integer[2])
})
output$map <- renderLeaflet({
reds <- colorNumeric("Reds", domain = NULL)
leaflet(data1) %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
# set boundaries for map
fitBounds(lng1 = min(data1$long),
lat1 = min(data1$lat),
lng2 = max(data1$long),
lat2 = max(data1$lat)) %>%
addLayersControl(position = "bottomright",
baseGroups = c('COVID Casecount', 'Temperature'),
options = layersControlOptions(collpased = TRUE))%>%
# add legend for the map
addLegend("bottomleft", pal = reds, values = ~casecount,
title = "Confirmed COVID Cases <br> (data: NYTimes)",
opacity = 0.5,
bins = 5)%>%
hideGroup(c('COVID Casecount','Temperature')) %>%
showGroup('COVID Casecount')
})
observe({input$map_groups{
my_map <-leafletProxy("map", data = filteredData()) %>%
clearMarkers()
if (input$map_groups == 'COVID Casecount') {
my_map <- my_map%>% addCircleMarkers(lng = ~long,
lat = ~lat,
radius = ~log(casecount) * 5.5,
weight = 1,
opacity = 5,
color = ~ifelse(casecount > 0, reds(casecount), NA),
popup = ~paste0(county, ",  ", casecount, " cases"))
}else{
my_map <- my_map%>% addCircleMarkers(lng = ~long,
lat = ~lat,
radius = ~log(death) * 3.5,
weight = 1,
opacity = 5,
color = ~ifelse(death > 0, reds(death), NA),
popup = ~paste0(county, ",  ", death, " cases"))
}
}
})
}
observe({input$map_groups{
my_map <-leafletProxy("map", data = filteredData()) %>%
clearMarkers()
if (input$map_groups == 'COVID Casecount') {
my_map <- my_map%>% addCircleMarkers(lng = ~long,
lat = ~lat,
radius = ~log(casecount) * 5.5,
weight = 1,
opacity = 5,
color = ~ifelse(casecount > 0, reds(casecount), NA),
popup = ~paste0(county, ",  ", casecount, " cases"))
}else{
my_map <- my_map%>% addCircleMarkers(lng = ~long,
lat = ~lat,
radius = ~log(death) * 3.5,
weight = 1,
opacity = 5,
color = ~ifelse(death > 0, reds(death), NA),
popup = ~paste0(county, ",  ", death, " cases"))
}
}
})
observe({
my_map <-leafletProxy("map", data = filteredData()) %>%
clearMarkers()
if (input$map_groups == 'COVID Casecount') {
my_map <- my_map%>% addCircleMarkers(lng = ~long,
lat = ~lat,
radius = ~log(casecount) * 5.5,
weight = 1,
opacity = 5,
color = ~ifelse(casecount > 0, reds(casecount), NA),
popup = ~paste0(county, ",  ", casecount, " cases"))
}else{
my_map <- my_map%>% addCircleMarkers(lng = ~long,
lat = ~lat,
radius = ~log(death) * 3.5,
weight = 1,
opacity = 5,
color = ~ifelse(death > 0, reds(death), NA),
popup = ~paste0(county, ",  ", death, " cases"))
}
})
shinyApp(ui2, server5,options = list(height = 550))
# shiny server input/output
server5 <- function(input, output, session) {
filteredData <- reactive({
data1 %>%
filter(day >= input$integer[1] & day <= input$integer[2])
})
output$map <- renderLeaflet({
reds <- colorNumeric("Reds", domain = NULL)
leaflet(data1) %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
# set boundaries for map
fitBounds(lng1 = min(data1$long),
lat1 = min(data1$lat),
lng2 = max(data1$long),
lat2 = max(data1$lat)) %>%
addLayersControl(position = "bottomright",
baseGroups = c('COVID Casecount', 'Temperature'),
options = layersControlOptions(collpased = TRUE))%>%
# add legend for the map
addLegend("bottomleft", pal = reds, values = ~casecount,
title = "Confirmed COVID Cases <br> (data: NYTimes)",
opacity = 0.5,
bins = 5)%>%
hideGroup(c('COVID Casecount','Temperature')) %>%
showGroup('COVID Casecount')
})
}
shinyApp(ui2, server5,options = list(height = 550))
observe({
my_map <-leafletProxy("map", data = filteredData()) %>%
clearMarkers()%>%
if (input$integer == 'COVID Casecount') {
my_map <- my_map%>% addCircleMarkers(lng = ~long,
lat = ~lat,
radius = ~log(casecount) * 5.5,
weight = 1,
opacity = 5,
color = ~ifelse(casecount > 0, reds(casecount), NA),
popup = ~paste0(county, ",  ", casecount, " cases"))
}else{
my_map <- my_map%>% addCircleMarkers(lng = ~long,
lat = ~lat,
radius = ~log(death) * 3.5,
weight = 1,
opacity = 5,
color = ~ifelse(death > 0, reds(death), NA),
popup = ~paste0(county, ",  ", death, " cases"))
}
})
shinyApp(ui2, server5,options = list(height = 550))
observe({
my_map <-leafletProxy("map", data = filteredData()) %>%
clearMarkers()%>%
if (input$integer == 'COVID Casecount') {
my_map <- my_map%>% addCircleMarkers(lng = ~long,
lat = ~lat,
radius = ~log(casecount) * 5.5,
weight = 1,
opacity = 5,
color = ~ifelse(casecount > 0, reds(casecount), NA),
popup = ~paste0(county, ",  ", casecount, " cases"))
}else{
my_map <- my_map%>% addCircleMarkers(lng = ~long,
lat = ~lat,
radius = ~log(deaths) * 3.5,
weight = 1,
opacity = 5,
color = ~ifelse(deaths > 0, reds(deaths), NA),
popup = ~paste0(county, ",  ", deaths, " cases"))
}
})
shinyApp(ui2, server5,options = list(height = 550))
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers()%>%
if (input$integer == 'COVID Casecount') {
my_map%>% addCircleMarkers(lng = ~long,
lat = ~lat,
radius = ~log(casecount) * 5.5,
weight = 1,
opacity = 5,
color = ~ifelse(casecount > 0, reds(casecount), NA),
popup = ~paste0(county, ",  ", casecount, " cases"))
}else{
my_map%>% addCircleMarkers(lng = ~long,
lat = ~lat,
radius = ~log(deaths) * 3.5,
weight = 1,
opacity = 5,
color = ~ifelse(deaths > 0, reds(deaths), NA),
popup = ~paste0(county, ",  ", deaths, " cases"))
}
})
# shiny server input/output
server5 <- function(input, output, session) {
filteredData <- reactive({
data1 %>%
filter(day >= input$integer[1] & day <= input$integer[2])
})
output$map <- renderLeaflet({
reds <- colorNumeric("Reds", domain = NULL)
leaflet(data1) %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
# set boundaries for map
fitBounds(lng1 = min(data1$long),
lat1 = min(data1$lat),
lng2 = max(data1$long),
lat2 = max(data1$lat)) %>%
addLayersControl(position = "bottomright",
baseGroups = c('COVID Casecount', 'Temperature'),
options = layersControlOptions(collpased = TRUE))%>%
# add legend for the map
addLegend("bottomleft", pal = reds, values = ~casecount,
title = "Confirmed COVID Cases <br> (data: NYTimes)",
opacity = 0.5,
bins = 5)%>%
hideGroup(c('COVID Casecount','Temperature')) %>%
showGroup('COVID Casecount')
})
}
shinyApp(ui2, server5,options = list(height = 550))
# shiny server input/output
server5 <- function(input, output, session) {
filteredData <- reactive({
data1 %>%
filter(day >= input$integer[1] & day <= input$integer[2])
})
output$map <- renderLeaflet({
reds <- colorNumeric("Reds", domain = NULL)
leaflet(data1) %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
# set boundaries for map
fitBounds(lng1 = min(data1$long),
lat1 = min(data1$lat),
lng2 = max(data1$long),
lat2 = max(data1$lat)) %>%
addLayersControl(position = "bottomright",
baseGroups = c('COVID Casecount', 'Temperature'),
options = layersControlOptions(collpased = TRUE))%>%
# add legend for the map
addLegend("bottomleft", pal = reds, values = ~casecount,
title = "Confirmed COVID Cases <br> (data: NYTimes)",
opacity = 0.5,
bins = 5)%>%
hideGroup(c('COVID Casecount','Temperature')) %>%
showGroup('COVID Casecount')
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers()%>%
if (input$integer == 'COVID Casecount') {
my_map%>% addCircleMarkers(lng = ~long,
lat = ~lat,
radius = ~log(casecount) * 5.5,
weight = 1,
opacity = 5,
color = ~ifelse(casecount > 0, reds(casecount), NA),
popup = ~paste0(county, ",  ", casecount, " cases"))
}else{
my_map%>% addCircleMarkers(lng = ~long,
lat = ~lat,
radius = ~log(deaths) * 3.5,
weight = 1,
opacity = 5,
color = ~ifelse(deaths > 0, reds(deaths), NA),
popup = ~paste0(county, ",  ", deaths, " cases"))
}
})
}
shinyApp(ui2, server5,options = list(height = 550))
# shiny server input/output
server5 <- function(input, output, session) {
filteredData <- reactive({
data1 %>%
filter(day >= input$integer[1] & day <= input$integer[2])
})
output$map <- renderLeaflet({
reds <- colorNumeric("Reds", domain = NULL)
leaflet(data1) %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
# set boundaries for map
fitBounds(lng1 = min(data1$long),
lat1 = min(data1$lat),
lng2 = max(data1$long),
lat2 = max(data1$lat)) %>%
addLayersControl(position = "bottomright",
baseGroups = c('COVID Casecount', 'Temperature'),
options = layersControlOptions(collpased = TRUE))%>%
# add legend for the map
addLegend("bottomleft", pal = reds, values = ~casecount,
title = "Confirmed COVID Cases <br> (data: NYTimes)",
opacity = 0.5,
bins = 5)%>%
hideGroup(c('COVID Casecount','Temperature')) %>%
showGroup('COVID Casecount')
})
observe({
my_map<-leafletProxy("map", data = filteredData()) %>%
clearMarkers()%>%
if (input$integer == 'COVID Casecount') {
my_map<-my_map%>% addCircleMarkers(lng = ~long,
lat = ~lat,
radius = ~log(casecount) * 5.5,
weight = 1,
opacity = 5,
color = ~ifelse(casecount > 0, reds(casecount), NA),
popup = ~paste0(county, ",  ", casecount, " cases"))
}else{
my_map<-my_map %>% addCircleMarkers(lng = ~long,
lat = ~lat,
radius = ~log(deaths) * 3.5,
weight = 1,
opacity = 5,
color = ~ifelse(deaths > 0, reds(deaths), NA),
popup = ~paste0(county, ",  ", deaths, " cases"))
}
})
}
shinyApp(ui2, server5,options = list(height = 550))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
blues <- colorNumeric("blue", domain = NULL)
runApp()
runApp()
runApp()
runApp()
runApp()
#case count and windchill
plot1<-ggplot(data = Nuece_TX, mapping = aes(x = casecount, y = `Heat Index`))+
geom_point()
plot1+ stat_cor(method = "pearson", p.accuracy = 0.001)
plot1+ stat_cor(method = "pearson", p.accuracy = 0.001)
#case count and windchill
plot1<-ggplot(data = Nuece_TX, mapping = aes(x = casecount, y = `Heat Index`))+
geom_point()
plot1+ stat_cor(method = "pearson", p.accuracy = 0.001)
pND+ stat_cor(method = "pearson", p.accuracy = 0.001,label.x.npc = "middle")
pTX<-ggplot(data = Nuece_TX, mapping = aes(x = casecount, y = `Heat Index` ))+
geom_point()+
geom_smooth(method = 'lm')+
labs(title = 'Degree Temperature VS COVID Case  in Texas  (Corpus Christi)',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground',
x = "COVID Case # [Not cummlative ]") +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
pTX<-stat_cor(method = "pearson", p.accuracy = 0.001)
pTX<-ggplot(data = Nuece_TX, mapping = aes(x = casecount, y = `Heat Index` ))+
geom_point()+
geom_smooth(method = 'lm')+
labs(title = 'Degree Temperature VS COVID Case  in Texas  (Corpus Christi)',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground',
x = "COVID Case # [Not cummlative ]") +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
pTX<-stat_cor(method = "pearson", p.accuracy = 0.001)
pTX
#case count and windchill
plot1<-ggplot(data = Nuece_TX, mapping = aes(x = casecount, y = `Heat Index`))+
geom_point()
plot1+ stat_cor(method = "pearson", p.accuracy = 0.001)
pTX<-ggplot(data = Nuece_TX, mapping = aes(x = casecount, y = `Heat Index` ))+
geom_point()+
geom_smooth(method = 'lm')+
labs(title = 'Degree Temperature VS COVID Case  in Texas  (Corpus Christi)',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground',
x = "COVID Case # [Not cummlative ]") +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
pTX<-stat_cor(method = "pearson", p.accuracy = 0.001)
pTX<-ggplot(data = Nuece_TX, mapping = aes(x = casecount, y = `Heat Index` ))+
geom_point()+
geom_smooth(method = 'lm')+
labs(title = 'Degree Temperature VS COVID Case  in Texas  (Corpus Christi)',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground',
x = "COVID Case # [Not cummlative ]") +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
pTX+stat_cor(method = "pearson", p.accuracy = 0.001)
pTX<-ggplot(data = Nuece_TX, mapping = aes(x = casecount, y = `Heat Index` ))+
geom_point()+
geom_smooth(method = 'lm')+
labs(title = 'Degree Temperature VS COVID Case  in Texas  (Corpus Christi)',
subtitle = 'Mean temperatures (Fahrenheit) Between May 1, 2021  and October 31, 2021\nData: Original CSV from the NYT and NOAA',
x = "COVID Case # [Not cummlative ]") +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
pTX+stat_cor(method = "pearson", p.accuracy = 0.001)
pTX<-ggplot(data = Nuece_TX, mapping = aes(x = casecount, y = `Heat Index` ))+
geom_point()+
geom_smooth(method = 'lm')+
labs(title = 'Degree Temperature VS COVID Case  in Texas  (Corpus Christi)',
subtitle = 'Mean temperatures (Fahrenheit) Between May 1, 2021  and October 31, 2021\nData: Original CSV from the NYT and NOAA',
x = "COVID Case # [Not cummlative ]", y = "[ºF]") +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
pTX+stat_cor(method = "pearson", p.accuracy = 0.001)
pTX<-ggplot(data = Nuece_TX, mapping = aes(x = casecount, y = `Heat Index` ))+
geom_point()+
geom_smooth(method = 'lm')+
labs(title = 'Degree Temperature VS COVID Case  in Texas  (Corpus Christi)',
subtitle = 'Mean temperatures (Fahrenheit) Between May 1, 2021  and October 31, 2021\nData: Original CSV from the NYT and NOAA',
x = "COVID Case # [Not cummlative ]", y = "[ºF]") +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
pTX+stat_cor(method = "pearson", p.accuracy = 0.001)
pTX<-ggplot(data = Nuece_TX, mapping = aes(x = casecount, y = `Heat Index` ))+
geom_point()+
geom_smooth(method = 'lm')+
labs(title = 'Degree Temperature VS COVID Case  in Texas  (Corpus Christi)',
subtitle = 'Mean temperatures (Fahrenheit) Between May 1, 2021  and October 31, 2021\nData: Original CSV from the NYT and NOAA',
x = "COVID Case # [Not cummlative ]", y = "[ºF]") +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = font_size = 13)
pTX<-ggplot(data = Nuece_TX, mapping = aes(x = casecount, y = `Heat Index` ))+
geom_point()+
geom_smooth(method = 'lm')+
labs(title = 'Degree Temperature VS COVID Case  in Texas  (Corpus Christi)',
subtitle = 'Mean temperatures (Fahrenheit) Between May 1, 2021  and October 31, 2021\nData: Original CSV from the NYT and NOAA',
x = "COVID Case # [Not cummlative ]", y = "[ºF]") +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y =  13)
pTX+stat_cor(method = "pearson", p.accuracy = 0.001)
pTX<-ggplot(data = Nuece_TX, mapping = aes(x = casecount, y = `Heat Index` ))+
geom_point()+
geom_smooth(method = 'lm')+
labs(title = 'Degree Temperature VS COVID Case  in Texas  (Corpus Christi)',
subtitle = 'Mean temperatures (Fahrenheit) Between May 1, 2021  and October 31, 2021\nData: Original CSV from the NYT and NOAA',
x = "COVID Case # [Not cummlative ]", y = "[ºF]") +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = "13" )
pTX+stat_cor(method = "pearson", p.accuracy = 0.001)
pTX<-ggplot(data = Nuece_TX, mapping = aes(x = casecount, y = `Heat Index` ))+
geom_point()+
geom_smooth(method = 'lm')+
labs(title = 'Degree Temperature VS COVID Case  in Texas  (Corpus Christi)',
subtitle = 'Mean temperatures (Fahrenheit) Between May 1, 2021  and October 31, 2021\nData: Original CSV from the NYT and NOAA',
x = "COVID Case # [Not cummlative ]", y = "[ºF]") +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = "13" )
pTX<-ggplot(data = Nuece_TX, mapping = aes(x = casecount, y = `Heat Index` ))+
geom_point()+
geom_smooth(method = 'lm')+
labs(title = 'Degree Temperature VS COVID Case  in Texas  (Corpus Christi)',
subtitle = 'Mean temperatures (Fahrenheit) Between May 1, 2021  and October 31, 2021\nData: Original CSV from the NYT and NOAA',
x = "COVID Case # [Not cummlative ]", y = "[ºF]") + ylab(title = "[ºF]")
pTX<-ggplot(data = Nuece_TX, mapping = aes(x = casecount, y = `Heat Index` ))+
geom_point()+
geom_smooth(method = 'lm')+
labs(title = 'Degree Temperature VS COVID Case  in Texas  (Corpus Christi)',
subtitle = 'Mean temperatures (Fahrenheit) Between May 1, 2021  and October 31, 2021\nData: Original CSV from the NYT and NOAA',
x = "COVID Case # [Not cummlative ]", y = "[ºF]")+
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
pTX+stat_cor(method = "pearson", p.accuracy = 0.001)
pTX<-ggplot(data = Nuece_TX, mapping = aes(x = casecount, y = `Heat Index` ))+
geom_point()+
geom_smooth(method = 'lm')+
labs(title = 'Degree Temperature VS COVID Case  in Texas  (Corpus Christi)',
subtitle = 'Mean temperatures (Fahrenheit) Between May 1, 2021  and October 31, 2021\nData: Original CSV from the NYT and NOAA',
y = "[ºF]",x = "COVID Case # [Not cummlative ]")+
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
pTX+stat_cor(method = "pearson", p.accuracy = 0.001)
pTX<-ggplot(data = Nuece_TX, mapping = aes(x = casecount, y = `Heat Index` ))+
geom_point()+
geom_smooth(method = 'lm')+
labs(title = 'Degree Temperature VS COVID Case  in Texas  (Corpus Christi)',
subtitle = 'Mean temperatures (Fahrenheit) Between May 1, 2021  and October 31, 2021\nData: Original CSV from the NYT and NOAA',
y = "[ºF]",x = "COVID Case # [Not cummlative ]")+
theme_ridges(font_size = 13, grid = TRUE)
pTX+stat_cor(method = "pearson", p.accuracy = 0.001)
pTX<-ggplot(data = Nuece_TX, mapping = aes(x = casecount, y = `Heat Index` ))+
geom_point()+
geom_smooth(method = 'lm')+
labs(title = 'Degree Temperature VS COVID Case  in Texas  (Corpus Christi)',
subtitle = 'Mean temperatures (Fahrenheit) Between May 1, 2021  and October 31, 2021\nData: Original CSV from the NYT and NOAA',
y = "[ºF]",x = "COVID Case # [Not cummlative ]")+
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
pTX+stat_cor(method = "pearson", p.accuracy = 0.001)
pTX<-ggplot(data = Nuece_TX, mapping = aes(x = casecount, y = `Heat Index` ))+
geom_point()+
geom_smooth(method = 'lm')+
labs(title = 'Degree Temperature VS COVID Case  in Texas  (Corpus Christi)',
subtitle = 'Mean temperatures (Fahrenheit) Between May 1, 2021  and October 31, 2021\nData: Original CSV from the NYT and NOAA',
y = "[ºF]",x = "COVID Case # [Not cummlative ]")+
theme_ridges(font_size = 13, grid = TRUE)
pTX+stat_cor(method = "pearson", p.accuracy = 0.001)
runApp('ProjectTestCase.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
